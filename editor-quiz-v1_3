<div id="editor-container">
    <h1>Criar/Editar Questionário</h1>
    <div class="file-uploader">
        <label>Carregar arquivo JSON para editar:</label>
        <input accept=".json" id="file-input" type="file" />
    </div>
    <div id="questions-list">
    </div>
    <button id="add-question-btn">Adicionar Pergunta</button>
    <br /><br />
    <button id="generate-json-btn">Gerar e Baixar JSON</button>
</div>

<script>
    // Função utilitária para carregar um script (JS ou CSS) dinamicamente
    function loadScript(url, type, callback) {
        let element;
        if (type === 'css') {
            element = document.createElement('link');
            element.rel = 'stylesheet';
            element.href = url;
        } else {
            element = document.createElement('script');
            element.src = url;
            element.async = true;
            element.onload = callback; // Callback só para scripts JS
        }
        document.head.appendChild(element);
    }

    // Estilos CSS do editor (Mantidos dentro do script para injeção)
    const editorStyles = `
        #editor-container {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background-color: #f4f4f4;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .file-uploader {
            margin-bottom: 20px;
            padding: 10px;
            border: 1px dashed #ccc;
            border-radius: 5px;
            background-color: #e9e9e9;
        }
        .question-block {
            border: 1px solid #ddd;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
            background-color: #fff;
            position: relative;
        }
        .question-block h3 {
            margin-top: 0;
        }
        .form-group {
            margin-bottom: 15px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        /* Estilo para o Quill Editor (Enunciado da Pergunta) */
        .question-block .quill-editor {
            height: 150px; /* Altura mínima para o editor de rich text */
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 0 0 4px 4px;
        }
        .question-block .ql-toolbar {
            border-radius: 4px 4px 0 0;
            border-bottom: none;
        }
        .form-group textarea {
            width: 95%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            resize: vertical;
            min-height: 50px;
        }
        .form-group input[type="text"] {
            width: 95%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .image-preview {
            max-width: 150px;
            height: auto;
            display: none;
            margin-top: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .options-list {
            margin-top: 10px;
            padding-left: 0;
        }
        .option-item {
            display: flex;
            align-items: flex-start;
            margin-bottom: 10px;
            border-bottom: 1px dotted #eee;
            padding-bottom: 10px;
        }
        .option-item input[type="radio"] {
            margin-right: 10px;
            margin-top: 8px;
        }
        .option-item textarea[name="optionText"] {
            flex-grow: 1;
            margin-right: 10px;
            min-height: 30px;
        }
        .option-item input[name="optionImage"] {
            width: 200px;
            margin-right: 10px;
        }
        .remove-option-btn, .remove-question-btn {
            background-color: #f44336;
            color: white;
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 4px;
        }
        .add-option-btn, #add-question-btn, #generate-json-btn {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 15px;
            cursor: pointer;
            border-radius: 4px;
            margin-top: 10px;
        }
        #generate-json-btn {
            background-color: #007BFF;
        }
    `;

    // 3. Função principal que contém toda a lógica do seu editor
    function initializeQuizEditor() {
        // [CÓDIGO PRINCIPAL DO EDITOR]
        const questionsList = document.getElementById('questions-list');
        const addQuestionBtn = document.getElementById('add-question-btn');
        const generateJsonBtn = document.getElementById('generate-json-btn');
        const fileInput = document.getElementById('file-input');

        let questionCounter = 0;

        function setupImagePreview(inputElement) {
            const previewElement = inputElement.nextElementSibling; 
            inputElement.addEventListener('input', () => {
                const url = inputElement.value;
                if (url) {
                    previewElement.src = url;
                    previewElement.style.display = 'block';
                } else {
                    previewElement.src = '';
                    previewElement.style.display = 'none';
                }
            });
        }

        // Adiciona uma nova pergunta ao formulário
        function addQuestion(questionData = null) {
            questionCounter++;
            const questionBlock = document.createElement('div');
            questionBlock.classList.add('question-block');
            questionBlock.dataset.questionIndex = questionCounter;

            const optionsCounter = questionData && questionData.options ? questionData.options.length : 2;
            const questionTextValue = questionData ? questionData.question : '';
            const questionImageValue = questionData && questionData.image ? questionData.image : '';

            questionBlock.innerHTML = `
                <h3>Pergunta ${questionCounter}</h3>
                <div class="form-group">
                    <label>Enunciado da Pergunta:</label>
                    <div class="quill-editor" id="editor-q-${questionCounter}"></div>
                </div>
                <div class="form-group">
                    <label>URL da Imagem do Enunciado (opcional):</label>
                    <input type="text" name="questionImage" value="${questionImageValue}">
                    <img class="image-preview" src="${questionImageValue}" style="display: ${questionImageValue ? 'block' : 'none'};">
                </div>
                <div class="options-list">
                    <h4>Alternativas:</h4>
                </div>
                <button type="button" class="add-option-btn">Adicionar Alternativa</button>
                <button type="button" class="remove-question-btn" style="position: absolute; top: 15px; right: 15px;">Remover Pergunta</button>
            `;

            const optionsList = questionBlock.querySelector('.options-list');
            const addOptionBtn = questionBlock.querySelector('.add-option-btn');
            const removeQuestionBtn = questionBlock.querySelector('.remove-question-btn');
            const questionImageInput = questionBlock.querySelector('input[name="questionImage"]');

            questionsList.appendChild(questionBlock);

            // Inicialização do Quill
            const editorElement = questionBlock.querySelector(`#editor-q-${questionCounter}`);
            const quill = new Quill(editorElement, {
                theme: 'snow',
                placeholder: 'Digite o enunciado da pergunta aqui...',
                modules: {
                    toolbar: [
                        ['bold', 'italic', 'underline', 'strike'],
                        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                        [{ 'script': 'sub'}, { 'script': 'super' }],
                        [{ 'indent': '-1'}, { 'indent': '+1' }],
                        [{ 'direction': 'rtl' }],
                        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                        [{ 'color': [] }, { 'background': [] }],
                        [{ 'align': [] }],
                        ['clean']
                    ]
                }
            });
            
            if (questionTextValue) {
                quill.root.innerHTML = questionTextValue;
            }
            
            questionBlock.quillEditor = quill;
            setupImagePreview(questionImageInput);

            for (let i = 0; i < optionsCounter; i++) {
                const option = questionData && questionData.options ? questionData.options[i] : null;
                addOption(optionsList, option, questionCounter, questionData ? questionData.correctAnswer : null);
            }

            addOptionBtn.addEventListener('click', () => addOption(optionsList, null, questionCounter));
            removeQuestionBtn.addEventListener('click', () => questionBlock.remove());
        }

        // Funções addOption, updateCorrespondingRadio, updateRadioValue, generateJson e loadJsonFromFile...
        // ... (o restante da sua lógica JS)
        function addOption(optionsList, optionData = null, questionIndex, correctAnswer = null) {
            const optionItem = document.createElement('div');
            optionItem.classList.add('option-item');
            
            const optionTextValue = optionData ? optionData.text : '';
            const optionImageValue = optionData && optionData.image ? optionData.image : '';

            const isCorrect = optionData && optionData.text === correctAnswer;

            optionItem.innerHTML = `
                <input type="radio" name="correctAnswer-${questionIndex}" value="${optionTextValue.replace(/"/g, '&quot;')}" ${isCorrect ? 'checked' : ''} onchange="updateRadioValue(this)">
                <textarea name="optionText" placeholder="Texto da alternativa" oninput="updateCorrespondingRadio(this)">${optionTextValue}</textarea>
                <input type="text" name="optionImage" placeholder="URL da Imagem (opcional)" value="${optionImageValue}">
                <img class="image-preview" src="${optionImageValue}" style="display: ${optionImageValue ? 'block' : 'none'};">
                <button type="button" class="remove-option-btn">Remover</button>
            `;

            const removeOptionBtn = optionItem.querySelector('.remove-option-btn');
            removeOptionBtn.addEventListener('click', () => optionItem.remove());

            const optionImageInput = optionItem.querySelector('input[name="optionImage"]');
            setupImagePreview(optionImageInput);

            optionsList.appendChild(optionItem);
        }
        
        function updateCorrespondingRadio(textareaElement) {
            const radioElement = textareaElement.closest('.option-item').querySelector('input[type="radio"]');
            if (radioElement.checked) {
                radioElement.value = textareaElement.value.replace(/"/g, '&quot;');
            }
        }
        
        function updateRadioValue(radioElement) {
            const textareaElement = radioElement.closest('.option-item').querySelector('textarea[name="optionText"]');
            radioElement.value = textareaElement.value.replace(/"/g, '&quot;');
        }


        function generateJson() {
            const questions = [];
            const questionBlocks = document.querySelectorAll('.question-block');
            let isValid = true;

            questionBlocks.forEach(block => {
                if (!isValid) return;

                const quillEditorInstance = block.quillEditor;
                const questionText = quillEditorInstance.root.innerHTML.trim() === '<p><br></p>' 
                                    ? '' 
                                    : quillEditorInstance.root.innerHTML;

                const questionImage = block.querySelector('input[name="questionImage"]').value.trim();
                const options = [];
                const optionItems = block.querySelectorAll('.option-item');
                const correctAnswerRadio = block.querySelector('input[name^="correctAnswer-"]:checked');
                
                if (!questionText && !questionImage) {
                    alert('Por favor, preencha o enunciado ou adicione uma imagem para a Pergunta ' + block.dataset.questionIndex + '.');
                    isValid = false;
                    return;
                }
                
                if (!correctAnswerRadio) {
                    alert('Por favor, selecione a resposta correta para a Pergunta ' + block.dataset.questionIndex + '.');
                    isValid = false;
                    return;
                }
                
                const correctAnswer = correctAnswerRadio.value;

                optionItems.forEach(item => {
                    const optionText = item.querySelector('textarea[name="optionText"]').value.trim();
                    const optionImage = item.querySelector('input[name="optionImage"]').value.trim();
                    
                    if (optionText) {
                        const option = { text: optionText };
                        if (optionImage) {
                            option.image = optionImage;
                        }
                        options.push(option);
                    }
                });
                
                if (options.length < 2) {
                    alert('A Pergunta ' + block.dataset.questionIndex + ' deve ter pelo menos 2 alternativas preenchidas.');
                    isValid = false;
                    return;
                }

                const newQuestion = {
                    question: questionText,
                    options: options,
                    correctAnswer: correctAnswer
                };
                if (questionImage) {
                    newQuestion.image = questionImage;
                }

                questions.push(newQuestion);
            });

            if (!isValid || questions.length === 0) {
                if (questions.length === 0 && isValid) {
                    alert('Por favor, adicione pelo menos uma pergunta.');
                }
                return;
            }

            const json = JSON.stringify(questions, null, 4);
            const blob = new Blob([json], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = 'perguntas.json';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            alert('Arquivo perguntas.json gerado com sucesso!');
        }

        function loadJsonFromFile(event) {
            const file = event.target.files[0];
            if (!file) {
                return;
            }

            const reader = new FileReader();
            reader.onload = (e) => {
                try {
                    const quizData = JSON.parse(e.target.result);
                    if (!Array.isArray(quizData)) {
                        alert("O arquivo JSON não está no formato de lista esperado.");
                        return;
                    }

                    questionsList.innerHTML = '';
                    questionCounter = 0;
                    quizData.forEach(addQuestion); 
                    alert("Questionário carregado com sucesso!");
                } catch (error) {
                    alert("Erro ao ler o arquivo JSON. Certifique-se de que o formato está correto.");
                    console.error(error);
                }
            };
            reader.readAsText(file);
        }

        addQuestionBtn.addEventListener('click', () => addQuestion());
        generateJsonBtn.addEventListener('click', generateJson);
        fileInput.addEventListener('change', loadJsonFromFile);

        // Adiciona uma pergunta inicial ao carregar a página
        addQuestion();
    }


    // 4. Fluxo de Injeção: Carregar CSS, Carregar JS e, finalmente, inicializar
    
    // Injeta o CSS do editor na tag <head>
    const styleTag = document.createElement('style');
    styleTag.textContent = editorStyles;
    document.head.appendChild(styleTag);
    
    // 1. Injeta o CSS do Quill (Tema)
    loadScript('https://cdn.quilljs.com/1.3.6/quill.snow.css', 'css');

    // 2. Injeta o JS do Quill e, no sucesso, inicializa o editor
    loadScript('https://cdn.quilljs.com/1.3.6/quill.js', 'js', initializeQuizEditor);

</script>
