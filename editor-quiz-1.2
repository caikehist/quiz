<div id="editor-container">
    <h1>Criar/Editar Questionário</h1>
    <div class="file-uploader">
        <label for="file-input">Carregar arquivo JSON para editar:</label>
        <input type="file" id="file-input" accept=".json">
    </div>
    <div id="questions-list">
        </div>
    <button id="add-question-btn">Adicionar Pergunta</button>
    <br><br>
    <button id="generate-json-btn">Gerar e Baixar JSON</button>
</div>

<style>
#editor-container {
    font-family: Arial, sans-serif;
    max-width: 800px;
    margin: 20px auto;
    padding: 20px;
    background-color: #f4f4f4;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.file-uploader {
    margin-bottom: 20px;
    padding: 10px;
    border: 1px dashed #ccc;
    border-radius: 5px;
    background-color: #e9e9e9;
}

.question-block {
    border: 1px solid #ddd;
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 5px;
    background-color: #fff;
    position: relative;
}

.question-block h3 {
    margin-top: 0;
}

.form-group {
    margin-bottom: 15px;
}

.form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

.form-group input[type="text"] {
    width: 95%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

.options-list {
    margin-top: 10px;
    padding-left: 20px;
}

.option-item {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}

.option-item input[type="radio"] {
    margin-right: 10px;
}

.option-item input[type="text"] {
    flex-grow: 1;
    margin-right: 10px;
}

.remove-option-btn, .remove-question-btn {
    background-color: #f44336;
    color: white;
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    border-radius: 4px;
}

.add-option-btn, #add-question-btn, #generate-json-btn {
    background-color: #4CAF50;
    color: white;
    border: none;
    padding: 10px 15px;
    cursor: pointer;
    border-radius: 4px;
    margin-top: 10px;
}

#generate-json-btn {
    background-color: #007BFF;
}
</style>

<script>
const questionsList = document.getElementById('questions-list');
const addQuestionBtn = document.getElementById('add-question-btn');
const generateJsonBtn = document.getElementById('generate-json-btn');
const fileInput = document.getElementById('file-input');

let questionCounter = 0;

// Adiciona uma nova pergunta ao formulário
function addQuestion(questionData = null) {
    questionCounter++;
    const questionBlock = document.createElement('div');
    questionBlock.classList.add('question-block');
    questionBlock.dataset.questionIndex = questionCounter;

    const optionsCounter = questionData ? questionData.options.length : 2;

    questionBlock.innerHTML = `
        <h3>Pergunta ${questionCounter}</h3>
        <div class="form-group">
            <label>Enunciado da Pergunta:</label>
            <input type="text" name="questionText" value="${questionData ? questionData.question : ''}">
        </div>
        <div class="form-group">
            <label>URL da Imagem do Enunciado (opcional):</label>
            <input type="text" name="questionImage" value="${questionData ? (questionData.image || '') : ''}">
        </div>
        <div class="options-list">
            <h4>Alternativas:</h4>
        </div>
        <button type="button" class="add-option-btn">Adicionar Alternativa</button>
        <button type="button" class="remove-question-btn" style="position: absolute; top: 15px; right: 15px;">Remover Pergunta</button>
    `;

    const optionsList = questionBlock.querySelector('.options-list');
    const addOptionBtn = questionBlock.querySelector('.add-option-btn');
    const removeQuestionBtn = questionBlock.querySelector('.remove-question-btn');

    for (let i = 0; i < optionsCounter; i++) {
        const option = questionData ? questionData.options[i] : null;
        addOption(optionsList, option, questionCounter, questionData ? questionData.correctAnswer : null);
    }

    addOptionBtn.addEventListener('click', () => addOption(optionsList, null, questionCounter));
    removeQuestionBtn.addEventListener('click', () => questionBlock.remove());

    questionsList.appendChild(questionBlock);
}

// Adiciona uma nova alternativa
function addOption(optionsList, optionData = null, questionIndex, correctAnswer = null) {
    const optionItem = document.createElement('div');
    optionItem.classList.add('option-item');
    
    // Verifica se a opção atual é a resposta correta para marcar o rádio
    const isCorrect = optionData && optionData.text === correctAnswer;

    optionItem.innerHTML = `
        <input type="radio" name="correctAnswer-${questionIndex}" value="${optionData ? optionData.text : ''}" ${isCorrect ? 'checked' : ''}>
        <input type="text" name="optionText" placeholder="Texto da alternativa" value="${optionData ? optionData.text : ''}">
        <input type="text" name="optionImage" placeholder="URL da Imagem (opcional)" value="${optionData ? (optionData.image || '') : ''}">
        <button type="button" class="remove-option-btn">Remover</button>
    `;

    const removeOptionBtn = optionItem.querySelector('.remove-option-btn');
    removeOptionBtn.addEventListener('click', () => optionItem.remove());

    optionsList.appendChild(optionItem);
}

// Gera o arquivo JSON a partir dos dados do formulário
function generateJson() {
    const questions = [];
    const questionBlocks = document.querySelectorAll('.question-block');

    questionBlocks.forEach(block => {
        const questionText = block.querySelector('input[name="questionText"]').value;
        const questionImage = block.querySelector('input[name="questionImage"]').value;
        const options = [];
        const optionItems = block.querySelectorAll('.option-item');
        const correctAnswer = block.querySelector('input[name^="correctAnswer-"]:checked');
        
        if (!questionText || !correctAnswer) {
            alert('Por favor, preencha o enunciado e selecione a resposta correta para todas as perguntas.');
            return;
        }

        optionItems.forEach(item => {
            const optionText = item.querySelector('input[name="optionText"]').value;
            const optionImage = item.querySelector('input[name="optionImage"]').value;
            if (optionText) {
                const option = { text: optionText };
                if (optionImage) {
                    option.image = optionImage;
                }
                options.push(option);
            }
        });
        
        if (options.length < 2) {
            alert('Cada pergunta deve ter pelo menos 2 alternativas.');
            return;
        }

        questions.push({
            question: questionText,
            image: questionImage,
            options: options,
            correctAnswer: correctAnswer.value
        });
    });

    if (questions.length === 0) {
        alert('Por favor, adicione pelo menos uma pergunta.');
        return;
    }

    const json = JSON.stringify(questions, null, 4);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'perguntas.json';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    alert('Arquivo perguntas.json gerado com sucesso!');
}

// Função para carregar um arquivo JSON e preencher o formulário
function loadJsonFromFile(event) {
    const file = event.target.files[0];
    if (!file) {
        return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
        try {
            const quizData = JSON.parse(e.target.result);
            if (!Array.isArray(quizData)) {
                alert("O arquivo JSON não está no formato de lista esperado.");
                return;
            }

            questionsList.innerHTML = '';
            questionCounter = 0;
            quizData.forEach(addQuestion);
            alert("Questionário carregado com sucesso!");
        } catch (error) {
            alert("Erro ao ler o arquivo JSON. Certifique-se de que o formato está correto.");
            console.error(error);
        }
    };
    reader.readAsText(file);
}


addQuestionBtn.addEventListener('click', () => addQuestion());
generateJsonBtn.addEventListener('click', generateJson);
fileInput.addEventListener('change', loadJsonFromFile);

// Adiciona uma pergunta inicial ao carregar a página
addQuestion();
</script>
